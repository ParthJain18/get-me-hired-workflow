import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from config import DELIVERY_METHOD

def send_notification(results_list):
    """
    Main delivery function. Calls the appropriate method based on config.
    Handles a list of results to send a single summary notification.
    """
    if not results_list:
        print("No results to deliver.")
        return

    if DELIVERY_METHOD.lower() == 'email':
        print(f"üì¶ Preparing summary email for {len(results_list)} generated resume(s)...")
        _send_summary_email(results_list)
    elif DELIVERY_METHOD.lower() == 'none':
        print(" delivery method is 'none'. Skipping notification.")
    else:
        print(f"‚ö†Ô∏è Unknown delivery method specified in config: '{DELIVERY_METHOD}'")

def _create_summary_html_body(results):
    """Creates a single HTML body summarizing all generated resumes."""
    job_summaries_html = ""
    for result in results:
        job = result['job_details']
        
        failure_note_html = ""
        if result.get('generation_failed'):
            failure_note_html = """
            <p style="color: #D32F2F; font-size: 0.9em; margin-top: 5px; border-left: 3px solid #D32F2F; padding-left: 10px;">
              <strong>Note:</strong> The AI failed to tailor this resume. The original (unmodified) resume was attached instead.
            </p>
            """

        job_summaries_html += f"""
        <div style="border-bottom: 1px solid #ccc; padding-bottom: 15px; margin-bottom: 15px;">
          <h3 style="margin-bottom: 5px;"><strong>{job.get('title', 'N/A')}</strong> at <strong>{job.get('company', 'N/A')}</strong></h3>
          <p style="margin: 0 0 5px 0;">
            <strong>Location:</strong> {job.get('location', 'N/A')}<br>
            <strong>URL:</strong> <a href="{job.get('job_url', '#')}">View Job Posting</a>
          </p>
          <p style="margin: 0;"><strong>Gemini's Match Reason:</strong> <em>"{job.get('match_reason', 'Not provided.')}"</em></p>
          {failure_note_html}
        </div>
        """

    return f"""
    <html>
      <head></head>
      <body style="font-family: sans-serif; line-height: 1.6;">
        <h2>Job Application Assistant: Daily Summary</h2>
        <p>Your AI assistant has generated {len(results)} new tailored resume(s) for the following top-ranked positions:</p>
        <hr>
        {job_summaries_html}
        <p>The tailored resume PDFs for all positions listed above are attached to this email.</p>
        <p><small>Generated by the AI Job Application Assistant.</small></p>
      </body>
    </html>
    """

def _send_summary_email(results):
    smtp_server = os.getenv("EMAIL_SMTP_HOST")
    smtp_port = os.getenv("EMAIL_SMTP_PORT")
    sender_addr = os.getenv("EMAIL_SENDER_ADDRESS")
    sender_pass = os.getenv("EMAIL_SENDER_PASSWORD")
    recipient_addr = os.getenv("EMAIL_TO")

    if not all([smtp_server, smtp_port, sender_addr, sender_pass, recipient_addr]):
        print("‚ùå Email configuration is incomplete in your .env file. Cannot send email.")
        return

    assert smtp_server is not None
    assert smtp_port is not None
    assert sender_addr is not None
    assert sender_pass is not None
    assert recipient_addr is not None

    msg = MIMEMultipart()
    msg['Subject'] = f"Job Assistant Summary: {len(results)} New Resume(s) Generated"
    msg['From'] = sender_addr
    msg['To'] = recipient_addr

    msg.attach(MIMEText(_create_summary_html_body(results), 'html'))

    for result in results:
        pdf_path = result['pdf_path']
        try:
            with open(pdf_path, "rb") as f:
                attach = MIMEApplication(f.read(), _subtype="pdf")
            attach.add_header('Content-Disposition', 'attachment',
                              filename=os.path.basename(pdf_path))
            msg.attach(attach)
            print(f"  -> Attaching {os.path.basename(pdf_path)}...")
        except FileNotFoundError:
            print(
                f"‚ùå Error: Could not find PDF file at '{pdf_path}' to attach. Skipping attachment.")
            continue

    try:
        print(
            f"  -> Connecting to SMTP server at {smtp_server}:{smtp_port}...")
        with smtplib.SMTP(smtp_server, int(smtp_port)) as server:
            server.starttls()
            server.login(sender_addr, sender_pass)
            server.send_message(msg)
            print("‚úÖ Summary email sent successfully!")
    except Exception as e:
        print(f"‚ùå Failed to send summary email: {e}")
